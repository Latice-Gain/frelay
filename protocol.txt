------------------------------------------------------------------------
 protocol.txt

 Copyright 2016 Urban Wallasch <irrwahn35@freenet.de>

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:

 * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer
   in the documentation and/or other materials provided with the
   distribution.
 * Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived
   from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
------------------------------------------------------------------------


File Relay (frelay) Protocol Specification
==========================================

Informal Description
====================

- The client opens a TCP connection to server; this connection is kept
alive, all communication is directed through this single TCP connection.
The tuple {Source ID; Destination ID; Transaction ID; Exchange ID} is
used to ascribe a message to a certain operation.

- Once the connection to the server is established, the client must
identify itself with its credentials.

- A client can then retrieve a list of peers currently known from the
server, offer files to others, retrieve files offered to him, and send
files to satisfy requests made by others.

- #TODO: what more?



Message Structure
=================

Each message consists of a 48 byte fixed-size message header and a
variable length payload segment.

All header fields are encoded in 16-, 32-, or 64-bit wide words, and
transmitted in network byte order, i.e. MSB first.

       6         5          4          3         2          1
B\b 321098765432109876 54321098765432 1098765432109876 5432109876543210
   +----------------+----------------+----------------+----------------+
 0 |  Message Type  | Payload Length |            Reserved             |
   +----------------+----------------+----------------+----------------+
 8 |                             Timestamp                             |
   +----------------+----------------+----------------+----------------+
16 |                             Source ID                             |
   +----------------+----------------+----------------+----------------+
24 |                          Destination ID                           |
   +----------------+----------------+----------------+----------------+
32 |                          Transaction ID                           |
   +----------------+----------------+----------------+----------------+
40 |                            Exchange ID                            |
   +----------------+----------------+----------------+----------------+
   +----------------+----------------+----------------+----------------+
48 |          Payload length octets of TLV encoded attributes          |
 . |                               . . .                               |
 . |                 (padded to next 64 bit boundary)                  |
   +----------------+----------------+----------------+----------------+


Message Type
------------
The first 16 bits of a message header indicate the type of the message.
Of those, the four lowest order bits specify the general class of the
message:

    b0000 (0x0)  Indication
    b0001 (0x1)  Request
    b0010 (0x2)  Response
    b1010 (0xa)  Error Response

All other possible combinations of those four bits are reserved for
future use and shall be treated as invalid message class specifiers for
the time being.

The twelve high order bits encode the individual message type. The
various message types are described in more detail below.


Payload Length
--------------
Sixteen bit unsigned integer representing the message payload length,
i.e. the number of data octets encapsulated in the message, excluding
the message header and message digest. Since the payload segment must
be padded to the next 64 bit boundary this number must be evenly
dividable by eight, thus the four least significant bits must always
be zero.

In theory, 16 bit would allow for up to 65532 octets of payload data
in a single message. However, the maximum supported value is limited
to 65400, to enable implementations to fit the largest possible message
plus some additional management data into one single 64KiB chunk of
memory.


Reserved
--------
32 bits reserved for future use as e.g. option flags or version tag.
For the time being these shall be set to zero by the sender of a message
and shall be ignored by the recipient.


Timestamp
----------
64-bit message creation timestamp in nanosecond resolution.


Source ID
---------
64-bit user ID of the message origin (sender). This ID is persistently
assigned by the server at account creation time, and once issued will
never be reused for another account. It is provided to uniquely identify
each individual client.

A client need not fill in this field when sending a message, as the
server will in any case overwrite it with the correct value based on
its own notion about the user account associated with the connected
client.

Messages originating at the server will always have their source ID
set to all bits zero.


Destination ID
--------------
64-bit user ID specifying the message recipient. This field must always
be filled in by the sender of a message.

An all bits zero destination ID is reserved for messages directed at
the server. An all bits one destination ID is reserved for future use
as the broadcast address.


Transaction ID
--------------
The transaction ID is a 64-bit pseudo-random number generated by the
initiator of a logical transaction. A transaction may comprise one or
more request/response pairs, referred to as "exchanges". All exchanges
pertaining to one logical transaction, e.g. transfer of a file larger
than ~64KiB, shall be tagged with the same transaction id.


Exchange ID
-----------
The exchange ID is a 64-bit number generated by the initiator of an
exchange, i.e. the sender of a request ot indication. This ID identifies
one single exchange (one single request/response pair), which may be
part of a larger logical transaction. This number may be implemented as
a simple counter, counting up from an arbitrary initial value.


Message Payload
---------------
Payload data carried by the message, consisting of type-length-value
(TLV) encoded attributes, see below.



Message Types
=============

REGISTER
--------
#TODO: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0011              0x0012              0x001a
Direction       Clt-->Srv           Srv-->Clt           Srv-->Clt
Mand. Attrib.   USERNAME, PUBKEY    OK                  ERROR
Opt. Attrib.                        NOTICE              NOTICE


LOGIN
-----
#TODO: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0021              0x0022              0x002a
Direction       Clt-->Srv           Srv-->Clt           Srv-->Clt
Mand. Attrib.   USERNAME            CHALLENGE           ERROR
Opt. Attrib.    -                   -                   NOTICE


AUTH
----
#TODO: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0031              0x0032              0x003a
Direction       Clt-->Srv           Srv-->Clt           Srv-->Clt
Mand. Attrib.   DIGEST              OK                  ERROR
Opt. Attrib.    -                   NOTICE              NOTICE


LOGOUT
------
#TODO: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0041              0x0042              0x004a
Direction       Clt-->Srv           Srv-->Clt           Srv-->Clt
Mand. Attrib.   -                   OK                  ERROR
Opt. Attrib.    -                   NOTICE              NOTICE


PEERLIST
--------
#TODO: description

#CONSIDER: server uses unsolicited indication to inform client about
           changes (peers appearing, others disconnecting)?

More than one peer may be included in a single response.

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0051              0x0052              0x005a
Direction       Clt-->Srv           Srv-->Clt           Srv-->Clt
Mand. Attrib.   -                   PEERID, PEERNAME    ERROR
Opt. Attrib.    -                   -                   NOTICE


OFFER
-----
#TODO: description

More than one offer may be included in a single request.

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0111              0x0112              0x011a
Direction       Clt-->Clt           Clt-->Clt           Clt-->Clt
Mand. Attrib.   OFFERID, SIZE       OK                  ERROR
Opt. Attrib.    FILENAME, MD5,      -                   NOTICE
                NOTICE, TTL


GETFILE
-------
#TODO: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0121              0x0122              0x012a
Direction       Clt-->Clt           Clt-->Clt           Clt-->Clt
Mand. Attrib.   OFFERID             DATA                ERROR
Opt. Attrib.    OFFSET, SIZE                            NOTICE


PING
-------
#TODO: description

The optional NOTICE attribute may be used for chat-like exchange of text
messages between clients.

                Indication|Request  Response            Error Response
--------------------------------------------------------------------------
Message type    0x0200|0x0201       0x0202              0x020a
Direction       Clt|Srv-->Clt|Srv   Clt|Srv-->Clt|Srv   Clt|Srv-->Clt|Srv
Mand. Attrib.   -                   OK                  ERROR
Opt. Attrib.    NOTICE              -                   NOTICE



Attributes
==========

Attributes are encoded using a type-length-value (TLV) pattern.

       6         5          4          3         2          1
B\b 321098765432109876 54321098765432 1098765432109876 5432109876543210
   +----------------+----------------+----------------+----------------+
0  | Attribute Type |Attribute Length|          Option Flags           |
   +----------------+----------------+----------------+----------------+
8  |                   Attribute length value octets                   |
.  |                               . . .                               |
.  |                  (padded to next 64 bit boundary)                 |
   +----------------+----------------+----------------+----------------+

The first sixteen bits specify the type of the attribute. See below for
a list of defined attributes.

It is followed by a 16-bit unsigned integer to specify the number of
value octets. Depending on the type of the this length may be any number
between 0 and 65400. The value field however is always padded to the
next 64-bit boundary. The value of padding bits is not specified, and it
must be ignored, except it shall be included in, and thus affect the
result of, any message SIGNATURE computation.

The next 32 bits are reserved for future use as e.g. option flags or
version tag. For the time being these shall be set to zero by the sender
of a message and shall be ignored by the recipient.

The order in which attributes appear in a message matters. For example,
any SIZE, NAME or MD5 attributes must immediately follow the OFFER
attribute they pertain to. Moreover, a SIGNATURE attribute shall only
appear as the last attribute in a message.

The following attributes are currently defined:

Attr.   Attribute   Valid
Type    Name        Lengths     Description
--------------------------------------------------------------------------
0x0001  USERNAME    3..NAME_MAX Null-terminated UTF-8 encoded character
                                string representing the user login name;
                                matched against the regular expression
                                "^[a-zA-Z_0-9]{3,31}$".
--------------------------------------------------------------------------
0x0002  PUBKEY      1..KEY_MAX  Public key provided by a client during
                                account creation.
--------------------------------------------------------------------------
0x0003  CHALLENGE   1..KEY_MAX  Challenge sent by the server as reply to
                                a LOGIN request. Used by the client to
                                generate a subsequent AUTH request.
                                #TODO: "nonce" encrypted with client's PUBKEY?
--------------------------------------------------------------------------
0x0004  DIGEST      1..KEY_MAX  Authentication digest generated by the
                                client from the server CHALLENGE.
--------------------------------------------------------------------------
0x0005  SIGNATURE   1..KEY_MAX  #TODO:
--------------------------------------------------------------------------
0x0008  TTL         8           Timespan in nanoseconds during which a
                                message can be considered valid.
--------------------------------------------------------------------------
0x0010  PEERID      8           ID of a peer currently logged into the
                                server. This ID is dynamically assigned
                                for each session.
--------------------------------------------------------------------------
0x0011  PEERNAME    3..NAME_MAX Null-terminated UTF-8 encoded character
                                string representing the friendly name
                                associated with the user identified by
                                the preceding PEERID, cref. USERNAME.
--------------------------------------------------------------------------
0x0021  OFFERID     8           ID assigned to an offer. Used in every
                                transaction exchange related to that
                                individual offer.
--------------------------------------------------------------------------
0x0022  FILENAME    1..PATH_MAX Null-terminated UTF-8 encoded character
                                string representing the name of the file
                                that is offered or requested.
--------------------------------------------------------------------------
0x0023  SIZE        8           64 bit size in octets of the file offered,
                                or length of a range requested.
--------------------------------------------------------------------------
0x0024  MD5         16          MD5 checksum of a file. This is not a
                                security measure, but solely intended to
                                provide a way to easily detect accidental
                                file corruption!
--------------------------------------------------------------------------
0x0025  OFFSET      8           64 bit start offset of requested range,
                                in octets. The value defaults to 0, if
                                this attribute is omitted.
--------------------------------------------------------------------------
0x0026  DATA        1..DATA_MAX Actual file data sent in response to a
                                previous GETFILE request, as identified
                                by the transaction ID. The length of the
                                value shall be less than or equal to the
                                requested range in octets.
--------------------------------------------------------------------------
0x0041  OK          0           Used in simple affirmative responses, e.g.
                                upon successful authentication, or receipt
                                of a file offer.
--------------------------------------------------------------------------
0x0042  ERROR       8           Numerical code to specify an actual error
                                condition.
--------------------------------------------------------------------------
0x0043  NOTICE      1..TEXT_MAX Null-terminated UTF-8 encoded character
                                string of arbitrary human readable text,
                                Either as informative part of a PING
                                message, or as textual description of the
                                error code specified in an error response.
--------------------------------------------------------------------------

Symbolic constants used above:

NAME_MAX := 32
    Maximum length in octets of a user name, including the terminating
    null character.

KEY_MAX  := 8192
    Maximum length in octets of a cryptographic key or signature.

PATH_MAX := 4096
    Maximum length in octets of a file name, including the terminating
    null character.

DATA_MAX := 65396
    Maximum length in octets of a DATA attribute value. 65396 is the
    theoretical limit (maximum payload length minus 4). However, the
    actual limit MAY be lower, if the message contains additional
    attributes.

TEXT_MAX := 1024
    Maximum length in octets of a login challenge, or a login digest,
    or a text message, including the terminating null character.






///////////////////////////////////////////////

#TODO:

 * describe broadcast offers and related server-side offer caching
 * point-to-point encryption (get peer's pubkey from server)
 * ...

/
| Message Digest SHA-256
| --------------
| Eight 32-bit words containing the SHA-256 message digest, computed
| over the entire message up to but excluding the message digest field
| itself, i.e. the message header, message payload and padding, if any.
|    [#TODO: move to payload as an attribute?]
\



==========================================================================







# EOF
