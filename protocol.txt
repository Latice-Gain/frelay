/*
 * protocol.txt
 *
 * Copyright 2016 Urban Wallasch <irrwahn35@freenet.de>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the following disclaimer
 *   in the documentation and/or other materials provided with the
 *   distribution.
 * * Neither the name of the  nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 */


File Relay (frelay) Protocol Specification
==========================================

Informal Description
====================

- The client opens a TCP connection to server; this connection is kept
alive, all communication is directed through this single TCP connection.
The tuple {Source ID; Destination ID; Transaction ID; Exchange ID} is
used to ascribe a message to a certain operation.

- Once the connection to the server is established, the client must
identify itself with its credentials.

- A client can then retrieve a list of peers currently known from the
server, offer files to others, retrieve files offered to him, and send
files to satisfy requests made by others.

- ... [TODO: what else?]



Message Structure
=================

Each message consists of a fixed-size message header and a variable
length message payload segment.

All header fields are encoded in, depending on the field, 16-bit ors
32-bit words, presented in network byte order, i.e. MSB first.

      3         2          1
 W\b 1098765432109876 5432109876543210
    +----------------+----------------+  \
 0  |TTTTTTTTTTTTTTTT|NNNNNNNNNNNNNNNN|  |
    +----------------+----------------+  |
 1  |           Source ID             |  |
    +----------------+----------------+  |
 2  |        Destination ID           |  > 5 32-bit words (20 octets)
    +----------------+----------------+  |  message header
 3  | Transaction ID |  Exchange ID   |  |
    +----------------+----------------+  |
 4  |         Option Flags (F)        |  |
    +----------------+----------------+  /

    +----------------+----------------+  \
 5  |        Message Payload          |  |
    |   N octets of TLV attributes    |  > N octets message payload
    |              . . .              |  |
    |(padded to next 32 bit boundary) |  |
    +----------------+----------------+  /


Message Type (T)
----------------
The first 16 bits of a message header specify the type of the message.
The four low order bits assign a general class to the message:

    b0000 (0x0)  Indication
    b0001 (0x1)  Request
    b0010 (0x2)  Response
    b1010 (0xa)  Error Response

All other combinations of those four bits are reserved for future use
and shall be treated as invalid message class indicators for the time
being.

The twelve high order bits encode the individual message type. These
message types are described in more detail below.


Payload Length (N)
------------------
Sixteen bit unsigned integer representing the message payload length,
i.e. the number of data octets encapsulated in the message, excluding
the message header and message digest. Since the payload segment must
be padded to the next 32 bit boundary, the two least significant bits
must always be zero.

In theory, 32 bit would allow for up to 65532 octets of payload data
in a single message. However, the maximum supported value is limited
to 65400, to enable implementations to fit the largest possible message
plus some additional management data, into one single 64KiB chunk of
memory. A message carrying no payload data at all may be used to keep
the connection alive.


Source ID
----------
32-bit ID of message origin (sender). This ID is assigned and managed
by the server and is used to identify an individual client. A client
need not fill in this ID, as the server will in any case set it to the
correct value based on its internal peer list. Thus, a client need not
necessarily know its own ID.

A message with a zero source ID, when received by a client, shall be
treated as a message originating at the server.


Destination ID
--------------
32-bit ID of message destination (recipient). This ID is assigned and
managed by the server and is used to identify an individual client.

An all bits zero destination ID is reserved for messages directed at
the server itself. An all bits one destination ID is reserved for use
as the broadcast address.

An all bits one destination id is reserved for use as the broadcast
address. Messages carrying such a destination id are relayed sent to
all clients currently logged in to the server.


Transaction ID
--------------
The transaction ID is a 32 bit pseudo-random number generated by the
initiator of a logical transaction.  A transaction may comprise one or
more request/response pairs (exchanges).  All exchanges pertaining to
one logical transaction (e.g. transfer of a file bigger than 64KiB),
shall carry the same transaction id.


Exchange ID
-----------
The exchange ID is a 32 bit pseudo-random number generated by the
initiator of the exchange (i.e. the sender of a request). This number
identifies one single exchange (i.e. one single request/response pair),
which may be part of a larger logical transaction.


Option Flags (F)
----------------
32 bits reserved for use as flags to specify various properties of the
message. Currently no such option flags are defined. Unused flags shall
be set to zero by the sender and shall be ignored by the recipient of
the message. [TODO: define flags for encryption?, compression?, ...?]


Message Payload
---------------
The payload data carried by the message, consisting of type-length-value
(TLV) encoded attributes, padded to the next 32 bit boundary. The value
of the padding bits is neither specified nor shall it be interpreted in
any way by the recipient of the message.



Message Types in Detail
=======================

LOGIN
-----
#ToDo: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0011              0x0012              0x001a
Direction       Clt-->Srv           Srv-->Clt           Srv-->Clt
Mand. Attrib.   USERNAME            CHALLENGE           ERROR
Opt. Attrib.    -                   -                   NOTICE


AUTH
----
#ToDo: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0021              0x0022              0x002a
Direction       Clt-->Srv           Srv-->Clt           Srv-->Clt
Mand. Attrib.   DIGEST              -                   ERROR
Opt. Attrib.    -                   -                   NOTICE


PEERLIST
--------
#ToDo: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0041              0x0042              0x004a
Direction       Clt-->Srv           Srv-->Clt           Srv-->Clt
Mand. Attrib.   -                   PEERID, PEERNAME    ERROR
Opt. Attrib.    -                   -                   NOTICE


OFFER
-----
#ToDo: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0111              0x0112              0x011a
Direction       Clt-->Clt           Clt-->Clt           Clt-->Clt
Mand. Attrib.   OFFERID, SIZE       -                   ERROR
Opt. Attrib.    FILENAME, MD5       -                   NOTICE


GETFILE
-------
#ToDo: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0121              0x0122              0x012a
Direction       Clt-->Clt           Clt-->Clt           Clt-->Clt
Mand. Attrib.   OFFERID             DATA                ERROR
Opt. Attrib.    OFFSET, SIZE        MD5                 NOTICE


PING
-------
#ToDo: description

                Request             Response            Error Response
--------------------------------------------------------------------------
Message type    0x0201              0x0202              0x020a
Direction       Clt|Srv-->Clt|Srv   Clt|Srv-->Clt|Srv   Clt|Srv-->Clt|Srv
Mand. Attrib.   -                   -                   ERROR
Opt. Attrib.    NOTICE              NOTICE              NOTICE



Attributes
==========

Attributes are encoded using a Type-Length-Value pattern.  The first
sixteen bits specify the type of the attribute, followed by a 16-bit
unsigned integer to specify the number of value octets to follow. The
actual length may be any number between 0 and 65500. However, the value
field is always padded up to the next 32-bit boundary. The value of the
padding octets is unspecified. They shall be ignored by the recipient
of the message.

     3         2          1
 W\b 1098765432109876 5432109876543210
    +----------------+----------------+  \
 0  | Attribute Type |   Length (L)   |  |
    +----------------+----------------+  |
 1  |         L octets of data        |  > A single TLV encoded attribute
    |              . . .              |  |
    |(padded to next 32 bit boundary) |  |
    +----------------+----------------+  /


The order in which attributes appear in a message matters. For example,
any SIZE, NAME or MD5 attributes must directly follow the OFFER attribute
they refer to. Moreover, a message digest attribute, if any, shall only
appear as the last attribute in a message.

The following attributes are currently defined:


Attr.   Attribute   Valid
Type    Name        Lengths     Description
--------------------------------------------------------------------------
0x0001  USERNAME    1..NAME_MAX Null-terminated UTF-8 encoded character
                                string representing the user login name.
--------------------------------------------------------------------------
0x0002  CHALLENGE   1..TEXT_MAX Challenge sent by the server as reply to
                                a LOGIN request. Used by the client to
                                generate an AUTH request.
                                In all subsequent messages the client
                                must use the destination ID conveyed by
                                the server and use it as the source ID .
--------------------------------------------------------------------------
0x0003  DIGEST      1..TEXT_MAX Authentication digest generated by the
                                client from CHALLENGE and client password.
--------------------------------------------------------------------------
0x000a  PEERID      4           ID of a peer currently logged into the
                                server. This ID is dynamically assigned
                                for each session.
--------------------------------------------------------------------------
0x000b  PEERNAME    1..NAME_MAX Null-terminated UTF-8 encoded character
                                string representing the friendly name
                                associated with the user identified by
                                the preceding PEERID.
--------------------------------------------------------------------------
0x0021  OFFERID     4           ID assigned to an individual offer. Used 
                                in every transaction and exchange related 
                                to that offer.
--------------------------------------------------------------------------
0x0022  FILENAME    1..PATH_MAX Null-terminated UTF-8 encoded character
                                string representing the name of the file
                                that is offered or requested.
--------------------------------------------------------------------------
0x0023  SIZE        8           64 bit size in octets of the file offered, 
                                or length of a range requested.
--------------------------------------------------------------------------
0x0024  MD5         16          MD5 checksum of the file. This is not a
                                security measure, but solely intended to
                                provide a way to easily detect accidental
                                file corruption!
--------------------------------------------------------------------------
0x0025  OFFSET      8           64 bit start offset of requested range,
                                in octets. The value defaults to 0, if
                                this attribute is omitted.
--------------------------------------------------------------------------
0x0026  DATA        1..DATA_MAX Actual file data sent in response to a
                                previous GETFILE request, as identified
                                by the transaction ID. The length of the
                                value shall be less than or equal to the
                                requested range in octets.
--------------------------------------------------------------------------
0x0041  ERROR       4           Numerical code to specify an actual error
                                condition.
--------------------------------------------------------------------------
0x0042  NOTICE      1..TEXT_MAX Null-terminated UTF-8 encoded character
                                string of arbitrary human readable text,
                                Either as informative part of a PING
                                message, or as textual description of the
                                error code specified in an error response.
--------------------------------------------------------------------------

Symbolic constants used:

NAME_MAX := 32
    Maximum length in octets of a user name, including the terminating
    null character.

PATH_MAX := 4096
    Maximum length in octets of a file name, including the terminating
    null character.

DATA_MAX := 65396
    Maximum length in octets of a DATA attribute value. 65396 is the
    theoretical limit (maximum payload length minus 4). However, the
    actual limit MAY be lower, if the message contains additional
    attributes.

TEXT_MAX := 1024
    Maximum length in octets of a login challenge, or a login digest,
    or a text message, including the terminating null character.






///////////////////////////////////////////////

/
| Message Digest SHA-256
| --------------
| Eight 32-bit words containing the SHA-256 message digest, computed
| over the entire message up to but excluding the message digest field
| itself, i.e. the message header, message payload and padding, if any.
|    [TODO: move to payload as an attribute?]
\



==========================================================================







# EOF
